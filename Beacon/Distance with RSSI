//Moteino_Beaxonx_V2
#include <SPI.h>
#include <LoRa.h>
#define Radiopin 10  //Moteino Mega 4, Moteino 10
#define Flashpin 8 //Moteino Mega 23, Moteino 8
#define SERIAL0_BAUD      115200
const int Beacons = 6; //0,1and 2
const int Beacon = 5; // Change the index of the becon. min 0 max Beacons-1
const int dt = 500;  //Delay between Beacon tweets
const unsigned long cycletime = dt*Beacons; //milli seconds

 
String MsgIn = "";
String MsgOut = "";
unsigned long t;

int lastRSSI[Beacons];
int lastSpeaker;
int ChirpAfter; 

void setup() {
  Serial.begin(SERIAL0_BAUD);
  while (!Serial);
  pinMode(Radiopin, OUTPUT);
  pinMode(Flashpin, OUTPUT);
  pinMode(LED_BUILTIN,OUTPUT);
  ChirpAfter = (Beacon == 0) ? Beacons-1 : Beacon-1;
  for(int i = 0; i < Beacons; i++){lastRSSI[i]=1;} 
  
  //Set Radio
  SetLora();
  // Set Falsh
  t = millis()+ cycletime; 
}

void loop() {
  
     if(Message()){
        
         if (lastSpeaker == ChirpAfter){
            
            //Serial.print("Chirping after: ");
            //Serial.println(ChirpAfter);
            
          delay(dt); //add some delay to give time for cows to write to memory
          Broadcast();
        }
     } else{
      if(t < millis()){ //Time elapsed
        //Serial.println("Time Elapsed");
        Broadcast();
      }
     }
    
}
bool Message(){ //Checks if there is a message. If true also updates RSSI
   //Checks for Lora radio message Returns true if there is a message
 //Read message is stored in global variable msg and RSSI is upaded as lastRSSI
 //<millis,RSSI,RadioID,LastRSSI,Checksum>
  digitalWrite(Flashpin, HIGH); //Turn off Flash
  digitalWrite(Radiopin, LOW);// Turn on radio
  bool b = false;
  int packetSize = LoRa.parsePacket();
   
  if (packetSize) { //Message Received
      // read packet
    MsgIn = "";
    while (LoRa.available()) {
      MsgIn += (char)LoRa.read();
    }
     //Serial.print("Msg In: ");Serial.println(MsgIn);
    if (MessageIsValid()){
      lastSpeaker = MsgIn.substring(1, MsgIn.indexOf(',')).toInt();
            
      lastRSSI[lastSpeaker] = -LoRa.packetRssi();//To tranmot only positive valu as RSSi is aways negative
      b = true;

    }
    
  
  }
 //digitalWrite(Radiopin, HIGH);// Turnoff radio
 return b; 
}

bool MessageIsValid(){
//msg, a module level varaible, has structure of <RadioID,RSSI,RSSI,Checksum>  
//Checksum is the char of checksum
//Returns True is Checksum matches
if (MsgIn.charAt(0) != '<' || MsgIn.charAt(MsgIn.length()-1) != '>' ){return false;} 
else if (Checksum(MsgIn.substring(0,MsgIn.length()-2)) != MsgIn.charAt(MsgIn.length()-2)){return false;}
else{return true;}
}

void Broadcast(){
  MsgOut = "<";
  MsgOut += Beacon;
  MsgOut += ",";
  for(int i = 0; i <Beacons; i++){
    if (i != Beacon){
      
      MsgOut += String(lastRSSI[i]);
      lastRSSI[i]=0; //Reset last rssi
      MsgOut += ",";
       }
      
  }
  MsgOut+= Checksum(MsgOut);
  MsgOut+= ">";
  digitalWrite(Flashpin, HIGH); //Turn off Flash
  digitalWrite(Radiopin, LOW);// Turn on radio
  LoRa.beginPacket();  LoRa.print(MsgOut); LoRa.endPacket();
  //digitalWrite(Radiopin, HIGH);// Turn off radio

  //Serial.print("MsgOut: ");
  //Serial.println(MsgOut);
  Blink(10,1);
  MsgOut = "";
  lastSpeaker = -1;
  t = millis()+ cycletime;
  
 }
///////////////////////////////////
void SetLora(){
//initialize Lora RFM95 radaio
  digitalWrite(Flashpin, HIGH); //Turn off Flash
  digitalWrite(Radiopin, LOW);// Turn on radio
  LoRa.setPins(Radiopin);
  delay(100);
  LoRa.setSpreadingFactor(7);
  LoRa.setTxPower(5); //in dB
 
  if (!LoRa.begin(915E6)) {
    Serial.println("Starting LoRa failed!");
    while (1);
  }

//  
//digitalWrite(Radiopin, HIGH);// Does not turn off radio but SPI CS select HI disselects radio

}  

char Checksum(String s){
//Returns Checksum (XOR of string S) as a char
  int  sum = 0;
    printf ("   ");
    for (int n = 0; n < s.length(); n++)  {
         sum = sum ^ s[n];
    }
    return (char)sum;
}

void Blink(int DELAY_MS, byte loops)
{
  while (loops--)
  {
    digitalWrite(LED_BUILTIN,HIGH);
    delay(DELAY_MS);
    digitalWrite(LED_BUILTIN,LOW);
    delay(DELAY_MS);  
  }
}
