# This code was from Hari Challa
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include "RTClib.h"
#include <LoRa.h> //https://github.com/sandeepmistry/arduino-LoRa/blob/master/src/LoRa.h
//https://github.com/sandeepmistry/arduino-LoRa/blob/master/API.md

#define Radiopin 10  //Moteino Mega 4, Moteino 10
#define Flashpin 8 //Moteino Mega 23, Moteino 8

LiquidCrystal_I2C lcd(0x27, 16, 2);//https://www.arduino.cc/reference/en/libraries/liquidcrystal-i2c/

RTC_DS1307 rtc;
char daysOfTheWeek[7][12] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};


// These constants won't change. They're used to give names to the pins used:
const int joyXpin = A0;  // Analog input pin that the potentiometer is attached to
const int joyYpin = A1;  // Analog input pin that the potentiometer is attached to
const int analogOutPin = 9; // Analog output pin that the LED is attached to

int joyX = 0;        // value read from the pot
int joyY = 0;        // value read from the pot
int outputValue = 0;        // value output to the PWM (analog out)
int outputValue1 = 0;        // value output to the PWM (analog out)

int joyButton = 2;

int shockButton = 3;
int JoyButtonState, ShockButtonState;

String MsgIn = "";
String MsgOut = "";
String cmd = "";
boolean newData = false;


const int SetCount = 6;
int curScreen = -1;
String screens[SetCount][2] = {
  {"< CowID >", " Tag ID "},
  {"S Duration", "< 100 ms >"},
  {"< S Intensity >", "< S Int >"},
  {"< Battery Level >", " % "},
  {"< Tag Bat Level >", " % "},
  {"Extra", "Menu"},
};

int parameters[SetCount];
bool updateScreen = true;

int MenuUpDown = 0;
int MenuLeftRight = 0;

int RED = 6, GREEN = 7, BUZZ = 5;
int SDuration = 100;
int CowID = 1;

byte localAddress = 0xBB;     // address of this device
byte destination = 0xFF;      // destination to send to

int DurationAr[] = {1, 10, 50, 100, 250};
int DurArloc = 1;
String RecLora = "";
void setup()
{
  lcd.init();                      // initialize the lcd
  // Print a message to the LCD.
  lcd.backlight();
  lcd.setCursor(1, 0);
  lcd.print("VFS ShockDur ");
  lcd.print(SDuration);
  lcd.print(">");
  lcd.setCursor(1, 1);
  lcd.print("< Cow no.");
  lcd.print(CowID);
  lcd.print(">");
  Serial.begin(9600);


  pinMode(joyButton, INPUT);
  pinMode(shockButton, INPUT_PULLUP);
  pinMode(RED, OUTPUT);
  pinMode(GREEN, OUTPUT);
  pinMode(BUZZ, OUTPUT);

  //  attachInterrupt(digitalPinToInterrupt(joyButton), trigMenu, FALLING);
  //  attachInterrupt(digitalPinToInterrupt(shockButton), trigShock, FALLING);

  if (! rtc.begin()) {
    Serial.println("Couldn't initialize RTC, time inaccurate");
  }
  rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));

  pinMode(Radiopin, OUTPUT);
  pinMode(LED_BUILTIN, OUTPUT);
  digitalWrite(Flashpin, HIGH);// Turn off Flash

  SetLora(); //Set Radio
}

void trigMenu() {

  Serial.println("joyButton");
}

void trigShock() {

  Serial.println("shockButton");
}

void loop()
{

  joyX = analogRead(joyXpin);
  joyY = analogRead(joyYpin);
  JoyButtonState = digitalRead(joyButton);
  ShockButtonState = digitalRead(shockButton);

  if (JoyButtonState == HIGH) {
    digitalWrite(GREEN, HIGH);
//    digitalWrite(BUZZ, HIGH);
  }
  else {

    digitalWrite(GREEN, LOW);
//    digitalWrite(BUZZ, LOW);
  }

  if (ShockButtonState == LOW) {
    digitalWrite(RED, HIGH);
    digitalWrite(BUZZ, HIGH);
  }
  else {

    digitalWrite(RED, LOW);
    digitalWrite(BUZZ, LOW);
  }

  //digitalWrite(RED, HIGH);
  //digitalWrite(GREEN, HIGH);
  //digitalWrite(BUZZ, HIGH);

  // print the results to the Serial Monitor:
  Serial.print("X = ");
  Serial.print(joyX);
  Serial.print("\t Y = ");
  Serial.print(joyY);
  Serial.print("\t Select = ");
  Serial.print(JoyButtonState);
  Serial.print("\t Shock = ");
  Serial.println(ShockButtonState);


  if (joyX < 600) {
    Serial.println("Menu Left");
    MenuLeftRight = MenuLeftRight + 1;
    Serial.print("\t Menu Pos");
    Serial.println(MenuLeftRight);
    if (MenuLeftRight >= 6) {
      MenuLeftRight = 0;
    }
  }
  if (joyX > 800) {
    Serial.println("Menu Right");
    MenuLeftRight = MenuLeftRight - 1;
    Serial.print("\t Menu Pos");
    Serial.println(MenuLeftRight);
    if (MenuLeftRight <= 0) {
      MenuLeftRight = 6;
    }
  }
  if (joyY > 800) {
    Serial.println("Menu Up");
    MenuUpDown = MenuUpDown + 1;
    Serial.print("\t Menu Pos");
    Serial.println(MenuUpDown);
    if (MenuUpDown >= 6) {
      MenuUpDown = 0;
    }
  }
  if (joyY < 600) {
    Serial.println("Menu Down");
    MenuUpDown = MenuUpDown - 1;
    Serial.print("\t Menu Pos");
    Serial.println(MenuUpDown);
    if (MenuUpDown <= 0) {
      MenuUpDown = 6;
    }
  }

  switch (MenuUpDown) {
    case 1:
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("< CowID >");
      lcd.setCursor(0, 1);
      lcd.print("< Tag: ");
      lcd.print(CowID);
      lcd.print(" >");
      if (joyX < 600) {
        CowID  = CowID + 1;
      }
      if (joyX > 800) {
        CowID  = CowID - 1;
      }
      if (CowID  < 1) {
        CowID  = 3;
      }
      if (CowID  > 3) {
        CowID  = 1;
      }
      if (JoyButtonState == HIGH) {
        MenuUpDown = 0;
        Serial.print("Cow ID set to: ");
        Serial.println(CowID);
      }
      break;
    case 2:
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("< S Duration >");


      if (joyX < 600) {
        DurArloc = DurArloc + 1;
        if (DurArloc > 4) {
          DurArloc = 0;
        }
        SDuration = DurationAr[DurArloc];;
      }
      if (joyX > 800) {
        DurArloc = DurArloc - 1;
        if (DurArloc < 0) {
          DurArloc = 4;
        }
        SDuration = DurationAr[DurArloc];
      }
      if (JoyButtonState == HIGH) {
        MenuUpDown = 0;
        Serial.println("Ready to Shock");
        //        digitalWrite(GREEN, HIGH);
        //        digitalWrite(BUZZ, HIGH);
        //        delay(1000);
        //        digitalWrite(GREEN, LOW);
        //        digitalWrite(BUZZ, LOW);
      }
      lcd.setCursor(0, 1);
      lcd.print("< ");
      lcd.print(SDuration);
      lcd.print(" ms >");
      break;
    case 3:
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("< S Intensity >");
      lcd.setCursor(0, 1);
      lcd.print("< S Int >");
      break;
    case 4:
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("< Battery Level >");
      lcd.setCursor(0, 1);
      lcd.print("< % >");
      break;
    case 5:
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("< Tag Bat Level >");
      lcd.setCursor(0, 1);
      lcd.print("< % >");
      break;
    default:
      lcd.clear();
      lcd.print("VFS ShockDur ");
      lcd.print(SDuration);
      lcd.print(">");
      lcd.setCursor(1, 1);
      lcd.print("< Cow no.");
      lcd.print(CowID);
      lcd.print(">");
      if (ShockButtonState == 0) {
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("< Cow: ");
        lcd.print(CowID);
        lcd.print(">");
        lcd.setCursor(0, 1);
        lcd.print("Shocked @ ");
        lcd.print(SDuration);
        lcd.print(" ms");
        ExecuteCommand();
        delay(1000);
      }
      break;

  }
  delay(300);
Listen();
  RecLora = MsgIn.substring(0,6);
  if (RecLora == "Shocked") {
//    digitalWrite(BUZZ, HIGH);
    
    digitalWrite(RED, HIGH);
    digitalWrite(GREEN, HIGH);
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Shock Feedback ");
    lcd.setCursor(0, 1);
    lcd.print("Received");
    delay(500);
//    digitalWrite(BUZZ, LOW);
    digitalWrite(RED, LOW);
    digitalWrite(GREEN, LOW);
  }



}

void SetLora() {
  digitalWrite(Radiopin, LOW);// Turn on radio
  LoRa.setPins(Radiopin);
  delay(100);
  LoRa.setSpreadingFactor(7);
  LoRa.setTxPower(10); //in dB
  if (!LoRa.begin(915E6)) {
    Serial.println("Starting LoRa failed!");
    while (1);
  }
}

void Broadcast() {
  LoRa.beginPacket();  LoRa.print(MsgOut); LoRa.endPacket();
  //Serial.println(MsgOut);
  Blink(100, 1);
}
void Listen() { // Check if there is a message. If true also updates RSSI
  //Read message is stored in global variable MsgIn and RSSI is upaded as lastRSSI
  int packetSize = LoRa.parsePacket();
  if (packetSize) { //Message Received
    // read packet
    MsgIn = "";
    while (LoRa.available()) {
      MsgIn += (char)LoRa.read();
    }
    Serial.println(MsgIn);
    Blink(100, 1);
    if (MsgIn.substring(0, 15) == "Shock Delivered") {
      Blink(100, 2);
    }
  }

}

int Checksum(String s) {
  int  sum = 0;
  for (int n = 0; n < s.length(); n++)  {
    sum = sum ^ s[n];
  }
  return sum;
}

void Blink(int DELAY_MS, byte loops)
{
  while (loops--)
  {
    digitalWrite(LED_BUILTIN, HIGH);
    delay(DELAY_MS);
    digitalWrite(LED_BUILTIN, LOW);
    delay(DELAY_MS);
  }
}


void ExecuteCommand() {
  //Execute the command
  // Serial send <News> to get the the updates. Sets read poiner to last red
  // Serial send <All> to read from 0
  //Serial send <Erase> to delete memory and seset the read and write ponter to 0
  //  if (cmd.toInt() >= 10 && cmd.toInt() <= 250) {
  Serial.print("Shocking cow for: ");
  //    Serial.print(cmd);
  Serial.print(SDuration);
  Serial.println(" ms.");
  //  MsgOut = "<" + String(SDuration) + "," ;
  MsgOut = "<" + String(SDuration) + ",1," + String(CowID) + "," ;
  MsgOut += Checksum(MsgOut);
  MsgOut += ">";
  Broadcast();
  //  }
  //  else {
  //    Serial.print("Invalid Message");
  //  }
  //  newData = false;
}

void CheckCmd() {
  // This is a better code to ensure commnd is read properly Send command from serial terminals to read memory
  //(Shock Duration) to send command to arduino
  //
  static bool recvInProgress = false; //Static is necessary not to terminte reading at the middle of the line
  char startMarker = '(';
  char endMarker = ')';
  char rc;

  while (Serial.available() > 0 && newData == false) {
    rc = Serial.read();
    if (recvInProgress == true) {
      if (rc != endMarker) {
        cmd += rc;
      }
      else {
        recvInProgress = false;
        newData = true;
      }
    }
    else if (rc == startMarker) {
      cmd = "";
      recvInProgress = true;
    }
  }
}

//void loop() {
//
//  CheckCmd();
//
//   if (newData){
//    ExecuteCommand();
//   }
//   Listen();
//}
